package io.timewheel.crypto.cipher

import io.timewheel.util.Result
import java.security.spec.AlgorithmParameterSpec
import javax.crypto.spec.SecretKeySpec

/**
 * An encryption algorithm. Algorithms should describe [EncryptionInputs] and be able to produce
 * [DecryptionInputs] as well as [AlgorithmParameterSpec]s from them. This algorithm class is
 * designed to be extensible so that clients can provide support for algorithms of their own. See
 * [AES] for an example of how to implement a custom algorithm. Implementations must provide:
 *
 * - [name]: the name of the algorithm as specified in the transformation, see the following
 * document for valid names: https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#Cipher
 * - [keyLength]: the length of the key to use.
 */
abstract class Algorithm<
    EncryptionInputsType : Algorithm.EncryptionInputs<DecryptionInputsType>,
    DecryptionInputsType : Algorithm.DecryptionInputs
> (
    val name: String,
    val keyLength: KeyLength
) {

    abstract fun transformation(): String

    /**
     * Produces a [SecretKeySpec] from the provided [key]. Returns [KeyError] if the key is invalid.
     */
    fun getKeySpec(key: ByteArray): Result<SecretKeySpec, KeyError> {
        if (key.size*8 != keyLength.size) {
            return Result.Failure(KeyError.InvalidKey)
        }
        return Result.Success(SecretKeySpec(key, name))
    }

    /**
     * Produces an [AlgorithmParameterSpec] and [DecryptionInputs] from the provided [encryptionInputs].
     */
    abstract fun getDecryptionInputs(
        encryptionInputs: EncryptionInputsType
    ): Pair<AlgorithmParameterSpec, DecryptionInputsType>

    /**
     * Produces an [AlgorithmParameterSpec] from the provided [decryptionInputs].
     */
    abstract fun getParameterSpec(decryptionInputs: DecryptionInputsType): AlgorithmParameterSpec

    /**
     * Set of parameters or generators needed for the algorithm to produce a valid instance of
     * [AlgorithmParameterSpec]. Parameters and generators' outputs should be included in generated
     * instances of [DecryptionInputs].
     */
    abstract class EncryptionInputs<DecryptionInputsType : DecryptionInputs> {
        /**
         * Produces [DecryptionInputs].
         */
        abstract fun getDecryptionInputs(): DecryptionInputsType
    }

    /**
     * Set of values used or generated by the algorithm's [EncryptionInputs]. Must be able to
     * produce instances of [AlgorithmParameterSpec].
     */
    abstract class DecryptionInputs

    /**
     * Key length of the algorithm with a [size] in bits.
     */
    abstract class KeyLength(val size: Int)

    /**
     * Errors
     */
    sealed class KeyError {
        object InvalidKey : KeyError()
    }
}
